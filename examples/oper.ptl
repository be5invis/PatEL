define-operator infix "<>" 800 'never' : begin
	local tClass [definingEnv.newt 'class']
	local m : syntax-rules
		`(@x <> @y) `[new @tClass @x @y]
		
	set coinit.initFn : lambda [m] : begin
		set m.toPattern : lambda [form env w] : match form
			`(@x <> @y) : object
				whether : lambda [t] : ex `(@t && (@t.x <~> @x) && (@t.y <~> @y)) env
				assign : lambda [t locallyQ] : ex `[begin 
					[set @x @t.x]
					[set @y @t.y]
				] env
	set coinit.injectForm `[define [@tClass x y] : begin \\
		set this.x x
		set this.y y
		return nothing
	]
	return m

# console.log : 1 <> 2 <> 3 # ERROR!

console.log 'SAMPLE : INFIX'
console.log : 1 <> 2
let [(x <> y) (1 <> 2)] : begin
	console.log x y

console.log : (1 <> 2) <~> ({p q} <> y)
console.log : (1 <> 2) <~> (x <> y)

console.log 'SAMPLE : PREFIX'
define-operator prefix '~' : syntax-rules
	`(~ @x) `(1 / @x)

console.log : ~ 2