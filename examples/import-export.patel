### These are definition of macro [import] and [export].

define-macro import : syntax-rules
	`[import @module as @name] : dirty `[local @[formOf name] [@[externEnv.use 'require'] @module]]
	`[import @patterns from @module] : dirty `[local [object @::[formOf patterns]] [@[externEnv.use 'require'] @module]]
	`[import @module] : dirty `[@[externEnv.use 'require'] @module]

define-macro export : syntax-rules
	# Declaration exports, variable and function
	`[export : @(`define||`local) @slot @val] [atom slot] `[set
		@[externEnv.use 'exports'].(@{".quote" [formOf slot]})
		@[dirty `[local @slot @val]]]
	`[export : @(`define||`local) [@slot @::pars] @val] [atom slot] `[set
		@[externEnv.use 'exports'].(@{".quote" [formOf slot]})
		@[dirty `[local [@[formOf slot] @::[pars.map formOf]] @val]]]
	`[export : @(`define||`local) @modifer @slot @val] [atom slot] `[set
		@[externEnv.use 'exports'].(@{".quote" [formOf slot]})
		@[dirty `[local @slot @val]]]
	`[export : @(`define||`local) @modifer [@slot @::pars] @val] [atom slot] `[set
		@[externEnv.use 'exports'].(@{".quote" [formOf slot]})
		@[dirty `[local @modifer [@[formOf slot] @::[pars.map formOf]] @val]]]
	
	# Direct exports
	`[export default @content] `[begin \\
		local xs @[externEnv.use 'module'].exports
		set @[externEnv.use 'module'].exports @content
		foreach [s : items-of : Object.keys xs] : set @[externEnv.use 'module'].exports.(s) xs.(s)
	]
	`[export @slot] [atom slot] `[set @[externEnv.use 'exports'].(@{".quote" [formOf slot]}) @slot]

export : local x 1
export : define [f x] (x + 1)