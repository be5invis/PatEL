define co [require "co"]
define thunkify [require "thunkify"]
define request [require "request"]
define get [thunkify request.get]

define-macro start-task : lambda [form env] : macro-match form env 
	`[start-task @task] `[@task.then [lambda [] nothing]]


define-macro GeneratorFunction : syntax-rules 
	`[GeneratorFunction @fn] `[let [f @fn] : begin \\
		set f.constructor {.name "GeneratorFunction"}
		f
	]


define trace console.log

define GeneratorFunction [sequent] : begin 
	trace "Google"
	local a : yield [get 'http://www.google.com']
	trace "typeof.net"
	local b : yield [get 'http://typeof.net']
	trace "Baidu"
	local c : yield [get 'http://baidu.com']
	trace a.0.statusCode
	trace b.0.statusCode
	trace c.0.statusCode


define GeneratorFunction [parallel] : begin 
	local a : get 'http://www.google.com'
	local b : get 'http://typeof.net'
	local c : get 'http://baidu.com'
	local res : yield {a, b, c}
	trace : res.map [lambda [x] x.0.statusCode]


define GeneratorFunction [somethingWrong] : begin 
	try 
		begin 
			local res : yield [get "http://badhost.invalid"]
			trace res 
		ex
		begin 
			trace ex.code


start-task [co sequent]
start-task [co parallel]
start-task [co somethingWrong]