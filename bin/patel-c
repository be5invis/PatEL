#!/usr/bin/env node
var patel = require('../index');
var fs = require('fs');
var util = require('util');
var yargs = require('yargs')
	.alias('o', 'output-into')
	.alias('?', 'help')
	.describe('help', 'Displays this help.')
	.describe('o', 'Output sfd path. When absent, the result sfd is written to STDOUT.');

var argv = yargs.argv;
var instream = argv._[0] ? fs.createReadStream(argv._[0]): process.stdin;
var outstream = argv.o ? fs.createWriteStream(argv.o, { encoding: 'utf-8' }): process.stdout;

function generateLineAndColumnMap(input){
	var lines = [];
	var columns = [];
	var line = 1;
	var col = 0
	for(var j = 0; j < input.length; j++) {
		lines[j] = line;
		columns[j] = col;
		if(input[j] === '\n') { line += 1; col = 0 }
		else { col += 1 }
	};
	return {
		line: lines,
		column: columns
	}
}

function deepcopy(form){
	if(form instanceof Array) return form.map(deepcopy)
	else return form;
}

function printSourceLines(stream, lines, firstLineNumber){
	stream.write(lines.map(function(line, k){ return '  ' + (firstLineNumber + k) + '\t| ' + line}).join('\n') + '\n')
}

var input = '';
instream.on('data', function(buf){ input += buf.toString() })
instream.on('end', function(){
	input += '\n\n\n';
	var lcmap = generateLineAndColumnMap(input);
	var lines = input.split('\n');
	var gs = patel.globals();
	try {
		var ast = patel.parse(input);
		try {
			if(argv['dump-ast']) { outstream.write(util.inspect(deepcopy(ast), {depth: null}) + '\n'); return }
			var xast = patel.ex(ast, gs);
			patel.checkEvaluated(xast);
			if(argv['dump-expanded']) { outstream.write(util.inspect(deepcopy(xast), {depth: null}) + '\n'); return }
			var rast = patel.regularize(xast, gs);
			if(argv['dump-regularized']) { outstream.write(util.inspect(deepcopy(rast), {depth: null}) + '\n'); return }
			var tast = patel.pat2esc(rast, gs, lcmap);
			if(argv['dump-transformed']) { outstream.write(util.inspect(tast, {depth: null}) + '\n'); return }

			var result = patel.generateCode(tast, {sourceMap: argv._[0] || '(stdin)', sourceMapWithCode: true})
			if(argv.source_map) {
				outstream.write(result.map.toString() + '\n');
			} else {
				outstream.write(result.code + '\n');
			}
		} catch(ex) {
			if(ex.begins >= 0 && ex.ends >= 0) {
				util.error(ex);
				var ljBegins = lcmap.line[ex.begins] - 1
				var ljEnds = lcmap.line[ex.ends] - 1
				if(ljEnds - ljBegins < 3) {
					printSourceLines(process.stderr,lines.slice(ljBegins, ljEnds + 1), ljBegins + 1);
				} else {
					printSourceLines(process.stderr,lines.slice(ljBegins, ljBegins + 2), ljBegins + 1);
					process.stderr.write("......\n");
					printSourceLines(process.stderr,lines.slice(ljEnds - 1, ljEnds + 1), ljEnds);
				}
			} else {
				util.error(ex.stack || ex);
			}
			return;
		}
	} catch(ex) {
		process.stderr.write(ex.message + '\n');
		process.stderr.write("At Line " + ex.line + ', Column ' + ex.column + '\n');
		var line = input.split('\n')[ex.line - 1]
		process.stderr.write(line + '\n');
		process.stderr.write(line.replace(/\S/g, ' ').slice(0, ex.column) + '^\n');
		return;
	}
});