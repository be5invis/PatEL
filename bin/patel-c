#!/usr/bin/env node
var fs = require("fs");
var util = require("util");
var resumer = require("resumer");
var yargs = require("yargs")
    .alias("o", "output-into")
    .help("h")
    .alias("h", "help")
    .alias("h", "?")
    .alias("l", "line")
    .boolean([
        "source-map",
        "use-dev",
        "dump-ast",
        "dump-expanded",
        "dump-regularized",
        "dump-transformed",
        "strict",
        "esm",
    ])
    .describe("?", "Displays this help.")
    .describe("l", "Compile one-line script.")
    .describe(
        "o",
        "Output sfd path. When absent, the result sfd is written to STDOUT."
    );

var argv = yargs.argv;

if (argv["use-dev"]) {
    var patel = require("../index-dev");
} else {
    var patel = require("../index");
}
var plex = require("../plex");

var instream = (function () {
    if (argv.l) {
        var s = resumer();
        s.queue(argv.l);
        setTimeout(function () {
            s.end();
        }, 1);
        return s;
    } else if (argv._[0]) {
        return fs.createReadStream(argv._[0]);
    } else {
        return process.stdin;
    }
})();

function handleError(ex) {
    if (ex.suberrors) {
        for (var j = 0; j < ex.suberrors.length; j++) {
            plex.reportError(ex.suberrors[j], process.stderr);
        }
    } else {
        plex.reportError(ex, process.stderr);
    }
}

var input = "";
instream.on("data", function (buf) {
    input += buf.toString();
});
instream.on("end", function () {
    plex.compile(
        input,
        {
            patel: patel,
            from: argv.l
                ? { argv: "l" }
                : argv._[0]
                ? { file: argv._[0] }
                : { stream: "stdin" },
            esm: argv.esm,
            strict: argv.strict,

            warn: handleError,

            "dump-input": argv["dump-input"],
            "dump-ast": argv["dump-ast"],
            "dump-expanded": argv["dump-expanded"],
            "dump-regularized": argv["dump-regularized"],
            "dump-transformed": argv["dump-transformed"],
        },
        function (ex, result, dump) {
            const outstream = argv.o
                ? fs.createWriteStream(argv.o, { encoding: "utf-8" })
                : process.stdout;

            const oSourceMapStream =
                argv["source-map"] && argv.o
                    ? fs.createWriteStream(argv.o + ".map", {
                          encoding: "utf-8",
                      })
                    : null;

            if (ex) {
                handleError(ex);
                process.exit(1);
            } else if (result) {
                outstream.write(result.code + "\n");
                if (oSourceMapStream) {
                    oSourceMapStream.write(result.map.toString() + "\n");
                }
            } else {
                if (typeof dump === "string") {
                    outstream.write(dump);
                } else if (!outstream.isTTY) {
                    outstream.write(JSON.stringify(dump));
                } else {
                    outstream.write(util.inspect(dump, { depth: null }) + "\n");
                }
            }
        }
    );
});
