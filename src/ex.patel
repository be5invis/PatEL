define Scope [require "patrisika"].Scope
define [atom x] ([typeof x] == "string")
define [identifier x] : [atom x] && [[regex '^[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԣԱ-Ֆՙա-ևא-תװ-ײء-يٮ-ٯٱ-ۓەۥ-ۦۮ-ۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴ-ߵߺऄ-हऽॐक़-ॡॱ-ॲॻ-ॿঅ-ঌএ-ঐও-নপ-রলশ-হঽৎড়-ঢ়য়-ৡৰ-ৱਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલ-ળવ-હઽૐૠ-ૡଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହଽଡ଼-ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘ-ౙౠ-ౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠ-ೡഅ-ഌഎ-ഐഒ-നപ-ഹഽൠ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะา-ำเ-ๆກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-ະາ-ຳຽເ-ໄໆໜ-ໝༀཀ-ཇཉ-ཬྈ-ྋက-ဪဿၐ-ၕၚ-ၝၡၥ-ၦၮ-ၰၵ-ႁႎႠ-Ⴥა-ჺჼᄀ-ᅙᅟ-ᆢᆨ-ᇹሀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙶᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦩᧁ-ᧇᨀ-ᨖᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮ-ᮯᰀ-ᰣᱍ-ᱏᱚ-ᱽᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₔℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃ-ↄⰀ-Ⱞⰰ-ⱞⱠ-Ɐⱱ-ⱽⲀ-ⳤⴀ-ⴥⴰ-ⵥⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〆〱-〵〻-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆷㇰ-ㇿ㐀-䶵一-鿃ꀀ-ꒌꔀ-ꘌꘐ-ꘟꘪ-ꘫꙀ-ꙟꙢ-ꙮꙿ-ꚗꜗ-ꜟꜢ-ꞈꞋ-ꞌꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꤊ-ꤥꤰ-ꥆꨀ-ꨨꩀ-ꩂꩄ-ꩋ가-힣豈-鶴侮-頻並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּ-סּףּ-פּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ_$][0-9A-Z_a-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ\u0300-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ\u0483-\u0487Ҋ-ԣԱ-Ֆՙա-և\u0591-\u05bd\u05bf\u05c1-\u05c2\u05c4-\u05c5\u05c7א-תװ-ײ\u0610-\u061aء-\u065e٠-٩ٮ-ۓە-\u06dc\u06df-\u06e8\u06ea-ۼۿܐ-\u074aݍ-ޱ߀-ߵߺ\u0901-ह\u093c-\u094dॐ-\u0954क़-\u0963०-९ॱ-ॲॻ-ॿ\u0981-\u0983অ-ঌএ-ঐও-নপ-রলশ-হ\u09bc-\u09c4\u09c7-\u09c8\u09cb-ৎ\u09d7ড়-ঢ়য়-\u09e3০-ৱ\u0a01-\u0a03ਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ\u0a3c\u0a3e-\u0a42\u0a47-\u0a48\u0a4b-\u0a4d\u0a51ਖ਼-ੜਫ਼੦-\u0a75\u0a81-\u0a83અ-ઍએ-ઑઓ-નપ-રલ-ળવ-હ\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acdૐૠ-\u0ae3૦-૯\u0b01-\u0b03ଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ\u0b3c-\u0b44\u0b47-\u0b48\u0b4b-\u0b4d\u0b56-\u0b57ଡ଼-ଢ଼ୟ-\u0b63୦-୯ୱ\u0b82-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹ\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcdௐ\u0bd7௦-௯\u0c01-\u0c03అ-ఌఎ-ఐఒ-నప-ళవ-హఽ-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55-\u0c56ౘ-ౙౠ-\u0c63౦-౯\u0c82-\u0c83ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5-\u0cd6ೞೠ-\u0ce3೦-೯\u0d02-\u0d03അ-ഌഎ-ഐഒ-നപ-ഹഽ-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57ൠ-\u0d63൦-൯ൺ-ൿ\u0d82-\u0d83අ-ඖක-නඳ-රලව-ෆ\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2-\u0df3ก-\u0e3aเ-\u0e4e๐-๙ກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-\u0eb9\u0ebb-ຽເ-ໄໆ\u0ec8-\u0ecd໐-໙ໜ-ໝༀ\u0f18-\u0f19༠-༩\u0f35\u0f37\u0f39\u0f3e-ཇཉ-ཬ\u0f71-\u0f84\u0f86-ྋ\u0f90-\u0f97\u0f99-\u0fbc\u0fc6က-၉ၐ-႙Ⴀ-Ⴥა-ჺჼᄀ-ᅙᅟ-ᆢᆨ-ᇹሀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ\u135fᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙶᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-\u1714ᜠ-\u1734ᝀ-\u1753ᝠ-ᝬᝮ-ᝰ\u1772-\u1773ក-ឳ\u17b6-\u17d3ៗៜ-\u17dd០-៩\u180b-\u180d᠐-᠙ᠠ-ᡷᢀ-ᢪᤀ-ᤜ\u1920-\u192b\u1930-\u193b᥆-ᥭᥰ-ᥴᦀ-ᦩ\u19b0-\u19c9᧐-᧙ᨀ-\u1a1b\u1b00-ᭋ᭐-᭙\u1b6b-\u1b73\u1b80-\u1baaᮮ-᮹ᰀ-\u1c37᱀-᱉ᱍ-ᱽᴀ-\u1de6\u1dfe-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‿-⁀⁔ⁱⁿₐ-ₔ\u20d0-\u20dc\u20e1\u20e5-\u20f0ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃ-ↄⰀ-Ⱞⰰ-ⱞⱠ-Ɐⱱ-ⱽⲀ-ⳤⴀ-ⴥⴰ-ⵥⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ\u2de0-\u2dffⸯ々-〆\u302a-\u302f〱-〵〻-〼ぁ-ゖ\u3099-\u309aゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆷㇰ-ㇿ㐀-䶵一-鿃ꀀ-ꒌꔀ-ꘌꘐ-ꘫꙀ-ꙟꙢ-\ua66f\ua67c-\ua67dꙿ-ꚗꜗ-ꜟꜢ-ꞈꞋ-ꞌꟻ-\ua827ꡀ-ꡳ\ua880-\ua8c4꣐-꣙꤀-\ua92dꤰ-\ua953ꨀ-\uaa36ꩀ-\uaa4d꩐-꩙가-힣豈-鶴侮-頻並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּ-סּףּ-פּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ\ufe00-\ufe0f\ufe20-\ufe26︳-︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\-_@$]*$'].test x]
define [prim x] : [atom x] && ![identifier x]

define trace {}
define [findform form] : begin
	if (form && form.within && form.begins >= 0 && form.ends >= 0) : return form
	for [local j (trace.length - 1)] (j >= 0) [dec j] : begin
		if (trace.(j) && trace.(j).within && trace.(j).begins >= 0 && trace.(j).ends >= 0) : begin
			return trace.(j)
	return form
define FormInvalidError : let [raw [require "patrisika"].FormInvalidError] : lambda [form reason] : new raw [findform form] reason
	
define [NodeTranslation fn] : lambda [form env] : begin 
	trace.push form
	local res : fn.apply this arguments
	if (env.options.trace && [typeof form] === 'string' && res.0 === '.id') : then
		local found false
		for [local j (trace.length - 1)] (j >= 0 && !found) [dec j] : begin
			if (trace.(j) && trace.(j).within && trace.(j).begins >= 0 && trace.(j).ends >= 0) : begin
				set found true
				set res.begins trace.(j).begins
				set res.ends trace.(j).ends
				set res.within trace.(j).within
	: else
		if (form && res && form.begins >= 0) : set res.begins form.begins
		if (form && res && form.ends >= 0) : set res.ends form.ends
		if (form && res && form.within) : set res.within form.within
	trace.pop form
	return res

define [deQuasiquote form level env] : match form 
	{".unquote" c} : if [not level] c {".list" {".quote" ".unquote"} [deQuasiquote c (level - 1) env]}
	{".unquote" c {".quote" decLevel}} : begin 
		set decLevel [Math.max 1 [Math.floor decLevel]]
		if (level - decLevel < 0) c {".list" {".quote" ".unquote"} [deQuasiquote c (level - decLevel) env]}
	{".quasiquote" c} {".list" {".quote" ".quasiquote"} [deQuasiquote c (level + 1) env]}
	{".operatorPiece" :: items} : deQuasiquote [opSegToRegular items env] level env 
	{::xs} : match xs.((xs.length - 1)) 
		{".sliceunquote" x} : begin 
			local commonParts [[xs.slice 0 (0-1)].map [lambda [c] [deQuasiquote c level env]]]
			if [not level] 
				{".conslist"}.concat commonParts {x}
				{".list"}.concat commonParts {{".list" {".quote" ".sliceunquote"} [deQuasiquote x (level - 1) env]}}
		otherwise	: {".list"}.concat [xs.map [lambda [c] [deQuasiquote c level env]]]
	otherwise {".quote" otherwise}

define ASSOC_LEFT  'left'
define ASSOC_NEVER 'never'
define ASSOC_RIGHT 'right'
define [getOperatorInfo _operator env] : begin
	local operator _operator
	if [env.operatorInfo.has operator] : return [env.operatorInfo.get operator]
	# Automatic decide operator priority
	while (operator.0 === '<' && operator.(operator.length - 1) === ">") : set operator [operator.slice 1 (-1)]
	local priority 1000
	local associvity ASSOC_RIGHT
	if (operator && operator !== '=') : begin
		set priority : match operator.0
			'?' 100
			'^' 100
			'*' 200
			'/' 200
			'%' 200
			'+' 300
			'-' 300
			'=' 400
			'!' 400
			'<' 500
			'>' 500
			'&' 600
			'|' 700
			otherwise 1000
		set associvity : if (operator.length > 1 && operator.(operator.length - 1) === '>') ASSOC_RIGHT : match operator.0
			'!' ASSOC_NEVER
			'=' ASSOC_NEVER
			'<' ASSOC_NEVER
			'>' ASSOC_NEVER
			otherwise ASSOC_LEFT
	return {.priority priority .associvity associvity}
define [opSegToRegular items env] : begin
	local uber {".OG" nothing items.0}
	set uber.bp 0xFFFE
	local j 1
	while (j < items.length) : begin
		local operator items.(j)
		local operand items.(j + 1)
		set j (j + 2)
		local {.priority nbp .associvity assoc} : getOperatorInfo operator env
		if (nbp > 0xFFFE) : set nbp 0xFFFE
		
		local node {operator nothing operand}
		set node.bp nbp
		local n uber
		
		piecewise
		: (assoc === ASSOC_LEFT || assoc === ASSOC_NEVER) : begin
			while (n.2.bp > nbp) : set n n.2
			if (assoc === ASSOC_NEVER && n.2.bp === nbp) : begin
				throw : new FormInvalidError operand "Attempting to combine uncombinable operator \(operator)."
			set node.1 n.2
			set n.2 node
		: (assoc === ASSOC_RIGHT) : begin
			while (n.2.bp >= nbp) : set n n.2
			set node.1 n.2
			set n.2 node
		: true : begin
			throw : new FormInvalidError operand "Invalid associvity denotion '\(assoc)' for \(operator)."
	return uber.2

# Function [ex form env]: Expand macros and do scoping
define ex : NodeTranslation : lambda [form env] : match form 
	{".preserve" x} : return x
	{".quote" :: x} : return {".quote" :: x}
	{".quasiquote" x} : ex [deQuasiquote x 0 env] env
	{".unquote" x} : return [ex x env]
	{".id" :: x} : return {".id" :: x}
	{".t" :: x} : return {".t" :: x}
	{".lambda" {::args} body} : let : begin 
		define derived [new Scope env]
		for [local j 0] (j < args.length) [inc j] : if [atom args.(j)] : begin 
			derived.declare args.(j) true
			set args.(j) : derived.use args.(j)
		return {".lambda.scoped" args [ex body derived] derived}
	{".syntactic-closure" c e} : ex c e
	{".beta" {::args} body :: params} : let : begin 
		define derived [new Scope env]
		for [local j 0] (j < args.length) [inc j] : if [atom args.(j)] : begin 
			derived.declare args.(j) true
			set args.(j) : derived.use args.(j)
		for [local j 0] (j < args.length) [inc j] : begin 
			set params.(j) [ex params.(j) env]
		return {".beta.scoped" args [ex body derived] derived :: params}
	{".try" block {param} handler} : begin 
		env.declare param
		return {".try" [ex block env] {[env.use param]} [ex handler env]}
	{".xhash" :: args} : begin 
		# NOTE: PatEL's [.hash] differs from Patrisika's pure [.hash]
		# It supports arbitary initializer
		local a {}
		local allKeysAreQuotes true
		for [local j 1] (j < form.length) [inc j] : begin 
			local key [ex form.(j).(0) env]
			local value [ex form.(j).(1) env]
			match key 
				{".quote" x} nothing
				otherwise : set allKeysAreQuotes false
			a.push {key value}
		if allKeysAreQuotes 
			then : return {".hash" :: [a.map [lambda [pair] {pair.(0).(1) pair.(1)}]]}
			else : return : let [t [env.newt]] {".begin" {".set" t {".hash"}} :: [[a.map [lambda [pair] {".set" {"." t pair.(0)} pair.(1)}]].concat {t}]}
	{".hash" :: args} : begin 
		local a {}
		for [local j 1] (j < form.length) [inc j] : begin 
			a.push {form.(j).(0) [ex form.(j).(1) env]}
		return {".hash" :: a}
	{".conslist" :: items} : begin
		return {
			{"." [ex {".list" :: [form.slice 1 (-1)]} env] {".quote" "concat"}}
			[ex form.((form.length - 1)) env]
		}
	{".operatorPiece" :: items} : ex [opSegToRegular items env] env
	{".local" x constQ} : begin 
		env.declare x [if constQ 2 0]
		return [env.use x]
	{".local" x} : begin 
		env.declare x
		return [env.use x]
	{".revcall" callee arg0 :: args1} : begin 
		if ([atom callee] && [env.macros.has callee] && [env.macros.get callee] <@ Function) : begin 
			return [[env.macros.get callee] [form.slice 1] env]
		local t : env.newt
		return {'.begin' {'.set' t [ex arg0 env]} [ex {callee t :: args1} env]}
	{callee :: args} : begin 
		if ([atom callee] && [env.macros.has callee] && [env.macros.get callee] <@ Function) : begin 
			return [[env.macros.get callee] form env]
		if [not [prim callee]] : set callee [ex callee env]
		local a {callee}
		for [local j 1] (j < form.length) [inc j] : begin 
			set a.(j) [ex form.(j) env]
		return a
	x ([atom x] && [env.macros.has x] && [env.macros.get x].invokeAsAtom) : return [[env.macros.get x].invokeAsAtom env]
	x ([atom x] && [env.macros.has x] && [not ([env.macros.get x] <@ Function)]) : return [env.macros.get x]
	x ([atom x] && [env.macros.has x]) : begin
		if(env.options.warn) : env.options.warn : new FormInvalidError [findform form] "You are using macro [\(x)] as an atom."
		return [env.use x]
	x [prim x] : return x
	x [atom x] : return [env.use x]
	any : return any

define [checkEvaluated form] : if (form && form <@ Array && form.length > 0) : begin 
	if form.unevaluated : throw : new FormInvalidError form "Unevaluated subform"
	form.forEach checkEvaluated

define [exports.pass form globalScope] [ex form globalScope]
define exports.ex ex
define exports.checkEvaluated checkEvaluated
define exports.deQuasiquote deQuasiquote
define exports.opSegToRegular opSegToRegular
define exports.FormInvalidError FormInvalidError